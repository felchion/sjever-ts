// attack.c// Modified by augx@sj 3/15/2002#include <ansi.h>#include <dbase.h>#include <origin.h>#include <skill.h>#include <pktime.h>#include <mudlib.h>#define MAX_OPPONENT 4static object *enemy = ({});static string *killer = ({});// prototypesobject *query_enemy() { return enemy; }string *query_killer() { return killer; }// This function returns 1 if we are fighting anyone (or with ob)varargs int is_fighting(object ob){	object me=this_object();	enemy -= ({ 0 });		if (!me || me->query("qi")<1 	|| me->query("jingli") < 1 || me->query("jing") < 1) return 0;		if (!ob)		return sizeof(enemy) > 0;    if (!objectp(ob)) return 0; 		return member_array(ob, enemy)!=-1;}// This function returns 1 if we are fighting anyone (or with ob)varargs int is_killing(mixed who){	string id;	if(stringp(who)) id=who;	if(objectp(who)) id=who->query("id");	if( !id ) return sizeof(killer) > 0; 	return member_array(id, killer)!=-1;}int can_fight(object ob) {	object me = this_object(); 		if (!me || !ob || !objectp(me) || !objectp(ob))	  return 0;		if(!me->is_character() || !ob->is_character()) 	  return 0;	  	if ( !userp(me)  || !userp(ob) ) 	  return 1;	if (me->query("env/fight_player") && ob->query("env/fight_player"))	  return 1;	  	if(ob->query("env/pk_give_up")){		message_vision("杀人不过头点地，$N已经投降认负，还是不要打了吧。\n", ob );		return 0;	}		if ( me->is_die_dummy() || ob->is_die_dummy()) {		message_vision("$N只是鸡呜狗盗之流，如何与人争锋。\n", (me->is_die_dummy()?me:ob) );		return 0;	}	if ( ob->query("combat_exp")<500000 ) {		message_vision("$N忽然觉起自己心太黑，羞愧无比，就不想再打了。\n", me, ob);		return 0;	}	if (!(ob->query_temp("kill_other/"+query("id")))	&& query("eff_online_rate")<95	&& !query_temp("revenge/"+ob->query("id"))) {		message_vision("$N忽然想起自己还要专心挂机，就不想再打了。\n", me, ob);		return 0;	}//	if ( me->query("max_pot") - ob->query("max_pot") > 100) {//		message_vision("$N忽然发现得$n武功太低，觉得索然无味就不想打了。\n", me, ob);//		return 0;//	}	if ( pktime_limit(me, ob)) {		tell_object(me, "玩家只能在规定的时间段内进行战斗行为。\n");		return 0;	}//killer -> pk by Ciwei@SJ  return 1;}//This function starts fight between this_object() and obvoid fight_ob(object ob){	object me = this_object();	if (!ob || ob==me)	return;	if (wizardp(me) && query("env/no_fight"))	return;  if(!can_fight(ob))   return;		set_heart_beat(1);	if (!living(me) || !present(ob, environment()))	return;	if ((!userp(me) || !userp(ob))	&& (environment(me)->query("no_fight") || environment(me)->query("sleep_room")))	return;	if( member_array(ob, enemy)==-1 )	enemy += ({ ob });	//added by snowman	if (query_temp("last_lost_to"))	delete_temp("last_lost_to");}// added by snowman@SJ 15/10/2000// 不能在一天内杀同一个人两次。int can_kill_ob(object me, object ob){	int i,count;//  string *killer;//	if (!userp(me))//		return 1;//	if (ob->query_condition("pk"))//killer -> pk by Ciwei@SJ//		return 1;//	if (!mapp(ob->query("last_death_time")))//	  return 1;//	if ( me->query_temp("revenge/"+ob->query("id")) )//    return 1;//  //  if (ob->query_temp("kill_other/"+me->query("id"))//	|| me->query_temp("other_kill/"+ob->query("id"))) //	  return 1;//	//	killer = keys(ob->query("last_death_time"));//	for(count=0;count<sizeof(killer);count++) {//		if (me->shard_id(killer[count]) //		|| me->query("id")==killer[count]) {//	    i = ob->query("last_death_time/"+ killer[count]);//	    if (i + 86400 > time()) return 0;//		}//	}		return 1;}// This function starts killing between this_object() and obvoid kill_ob(object ob){	object *inv, me = this_object();	string uid, mid;	int i;	if (!objectp(ob))		return 0;	if (!living(me) || !present(ob, environment()))		return 0;	if (wizardp(me) && query("env/no_fight"))		return 0;	mid = query("id");	uid = ob->query("id");	if (userp(me) && userp(ob)) {		if (ob->query_temp("kill_other/"+mid)) {			ob->delete_temp("other_kill/"+mid);			set_temp("other_kill/"+uid, 1);			delete_temp("kill_other/"+uid);		}		else if	(query("eff_online_rate")<95 && !query_temp("revenge/"+ob->query("id"))) {			message_vision("$N忽然想起自己还要专心挂机，就不想杀$n了。\n", me, ob);			return;		}					if (!query_temp("other_kill/"+uid)) {			if (query("eff_online_rate")<95 && !query_temp("revenge/"+ob->query("id"))) {				message_vision("$N忽然想起自己还要专心挂机，就不想杀$n了。\n", me, ob);				return;			}				set_temp("kill_other/"+uid, 1);			ob->set_temp("other_kill/"+mid, 1);			ob->delete_temp("kill_other/"+mid);		 		} 		else ob->set_temp("kill_other/"+mid, 1);//////if( !can_kill_ob(me,ob) && !GROUP_D->is_group_fight(me,ob)//////&& strsrch(file_name(environment(me)),"/cmds/leitai") != 0 ){//去掉 /bwdh 嘿嘿//////	message_vision("$N想了想，才杀$n不久，还是放过$p吧。\n", me, ob);//////	enemy -= ({ ob });//////	ob->remove_enemy(me);//////	return;//////}		if (stringp(uid = ob->query("family/family_name"))		&& !query("vendetta/" + uid)) {			inv = all_inventory(environment(me));			for(i=0; i<sizeof(inv); i++) {				if( wizardp(inv[i]) || inv[i]==me || !inv[i]->is_character()				|| inv[i] == ob || !living(inv[i]) )					continue;				if( uid == inv[i]->query("family/family_name") ) {					add("vendetta/" + uid, 1);					delete_temp("last_channel_msg");					CHANNEL_D->do_channel(inv[i], "party",						"大家注意啦！"+me->name()+"向"+ob->name()+"下手了！");					break;				}			}		}	} else		if (environment(me)->query("no_fight") || environment(me)->query("sleep_room"))			return;	uid = ob->query("id");	if (member_array(uid, killer) == -1)		killer += ({ uid });	tell_object(ob, HIR "看起来" + me->name() + "想杀死你！\n" NOR);	fight_ob(ob);	ob->fight_ob(me);}void clean_up_enemy(){	if (sizeof(enemy)) {		for(int i=0; i<sizeof(enemy); i++) {			if (!objectp(enemy[i])			|| !environment(enemy[i])			|| environment(enemy[i]) != environment()			|| (!living(enemy[i]) && !is_killing(enemy[i]->query("id"))) )				enemy[i] = 0;		}		enemy -= ({ 0 });	}}// This function checks if the current opponent is available or// select a new one.object select_opponent(){	int which;	if (!sizeof(enemy)) return 0;		if(stringp(this_object()->query("env/target")))	for(which=0;which<sizeof(enemy);which++)		if(enemy[which]->id(this_object()->query("env/target"))) return enemy[which];		//if(enemy[which]->parse_command_id_list()[0]==this_object()->query("env/target")) return enemy[which];		which = random(MAX_OPPONENT);	return which < sizeof(enemy) ? enemy[which] : enemy[0];}// Stop fighting ob.int remove_enemy(object ob){	if (!objectp(ob))		return 0;	if (!query_temp("combat_yield") && is_killing(ob->query("id")))		return 0;	enemy -= ({ ob });	return 1;}// Stop killing ob.int remove_killer(object ob){	string uid;	if (!objectp(ob))		return 0;	uid = ob->query("id");	if (is_killing(uid))		killer -= ({ uid });	return remove_enemy(ob);}// Stop all fighting, but killer remains.void remove_all_enemy(){	object ob = this_object();	delete_temp("combat_time");//combat_time 玩家战斗时间 体现某些武功技能越战越强	delete_temp("combat_been_wound");	delete_temp("combat_been_damage");//been hit 伤害	if (sizeof(enemy))		foreach (object item in enemy) {			// We ask our enemy to stop fight, but not nessessary to confirm			// if the fight is succeffully stopped, bcz the fight will start			// again if our enemy keeping call COMBAT_D->fight() on us.			if (objectp(item))				item->remove_enemy(ob);		}	enemy = ({});}// Stop all fighting and killing.void remove_all_killer(){	object ob = this_object();	killer = ({});	enemy -= ({ 0 });	for (int i = 0; i < sizeof(enemy); i++)		if (enemy[i]->remove_killer(ob))			enemy[i] = 0;;	enemy -= ({ 0 });}// reset_action()//// This function serves as a interface of F_ATTACK and wielded, worn objects.// When the living's fighting action need update, call this function.//varargs void reset_action(string fskill){	object ob, target, me;	mapping prepare;	string type, skill;	me = this_object();	target=me->query_temp("bishen_target");	if (objectp(target) && me->is_fighting(target)	&& !target->query_temp("bishen_target") ) {		prepare = target->query_skill_prepare();		if( ob = query_temp("weapon") ) type = ob->query("skill_type");		else if ( sizeof(prepare) == 0) type = "unarmed";		else if ( sizeof(prepare) == 1) type = (keys(prepare))[0];		else if ( sizeof(prepare) == 2) type = (keys(prepare))[target->query_temp("action_flag")];		skill = target->query_skill_mapped(type);		if (!stringp(skill) || target->query_skill(skill,1) < 1) {			if (ob && set("actions", ob->query("actions",1)));			else set("actions", (: call_other, target->query_temp("default_actions"), "query_action",target,ob :));		}		else		{			if ( ob ) set("actions", (: call_other, SKILL_D(skill), "query_action", target, ob :) );			else set("actions", (: call_other, SKILL_D(skill), "query_action", target :) );		}		return;	}	prepare = query_skill_prepare();	if( ob = query_temp("weapon") ) {		type = ob->query("skill_type");		if (type == "xiao") type = "sword";	}	else if ( sizeof(prepare) == 0) type = "unarmed";	else if ( sizeof(prepare) == 1) type = (keys(prepare))[0];	else if ( sizeof(prepare) == 2) type = (keys(prepare))[(me->query("env/hubo_switch"))?(me->query_temp("action_flag")):(!me->query_temp("action_flag"))];	skill = me->query_skill_mapped(type);	if (stringp(fskill)) skill = fskill;	if( !stringp(skill) || !query_skill(skill) ) {		if( ob ) set("actions", ob->query("actions",1));		else set("actions", (: call_other, query_temp("default_actions"), "query_action",me :));	}	else { 		// If using a mapped skill, call the skill daemon.		if ( ob ) set("actions", (: call_other, SKILL_D(skill), "query_action", me, ob :) );		else set("actions", (: call_other, SKILL_D(skill), "query_action",me :) );	}}// This is called in heart_beat() to perform attack action.int attack(){	object opponent;	int i;		if(this_object()->query_condition("fuxue_busy")) i=4;	else i=2;	clean_up_enemy();	opponent = select_opponent();	if (objectp(opponent)) {		set_temp("last_opponent", opponent);		add_temp("combat_time",1);//added by Ciwei@SJ		if (INTERMUD_MUD_NAME == "ts")		add_temp("perform_AP",40); //added by felchion@sjever 2011.8.22		else		add_temp("perform_AP",this_object()->query_int(2)/2/i);		if(time()>query("last_eff_combat")) {			add_temp("perform_AP",query_temp("combat_AP")/i);			set_temp("combat_AP",0);		}		delete_temp("clean_AP");		if (query_temp("perform_AP") > 1000)		set_temp("perform_AP",1000);		COMBAT_D->fight(this_object(), opponent);		return 1;	}	return 0;}//// init() - called by MudOS when another object is moved to us.//void init(){	object ob;	object me = this_object();	string vendetta_mark;	// We check these conditions here prior to handle auto fights. Although	// most of these conditions are checked again in COMBAT_D's auto_fight()	// function, these check reduces lots of possible failure in the call_out	// launched by auto_fight() and saves some overhead.	if (is_fighting()	|| !living(me)	|| !(ob = this_player())	|| environment(ob)!=environment()	|| !living(ob)	|| ob->query_temp("netdead") )		return;	// Now start check the auto fight cases.	if (userp(ob)) {		if (!userp(me)) set_heart_beat(1);		if( is_killing(ob->query("id"))  ) {			COMBAT_D->auto_fight(me, ob, "hatred");			return;		} else 		if( stringp(vendetta_mark = query("vendetta_mark"))		&& ob->query("vendetta/" + vendetta_mark) ) {			COMBAT_D->auto_fight(this_object(), ob, "vendetta");			return;		} else if((string)query("attitude")=="aggressive" ) {			COMBAT_D->auto_fight(this_object(), ob, "aggressive");			return;		}	}}